#!/bin/sh

snapshot=/tmp/snapshot.jpg
remove_file=esp32cam.jpg

plugin="scp"

. /sbin/common-plugins

show_help() {
	echo "Usage: $0 [-s host] [-p port] [-u username] [-d path] [-t template] [-v] [-h]
  -s host     SCP server FQDN or IP address.
  -p port     SCP server port.
  -d path     Directory on server, relative to SCP root.
  -t template File name on remote.
  -u username SCP username.
  -v          Verbose output.
  -h          Show this help.
"
	quit_clean 0
}

# override config values with command line arguments
while getopts d:f:p:P:s:u:vh flag; do
	case "$flag" in
		d)
			scp_path=$OPTARG
			;;
		t)
			scp_template=$OPTARG
			;;
		p)
			scp_port=$OPTARG
			;;
		s)
			scp_host=$OPTARG
			;;
		u)
			scp_user=$OPTARG
			;;
		v)
			verbose="true"
			;;
		h | *)
			show_help
			;;
	esac
done

[ -z "$scp_port" ] && scp_port=22

if [ "false" = "$scp_enabled" ]; then
	log "Sending to SCP is disabled."
	quit_clean 10
fi

# validate mandatory values
if [ -z "$scp_host" ]; then
	log "SCP host not found"
	quit_clean 11
fi

if [ -z "$scp_template" ]; then
	scp_template=$remove_file
fi

command="scp"
command="$command -P $scp_port"
command="$command $snapshot"
if [ -n "$scp_user" ]; then
	command="${command} ${scp_user}@"
else
	command="${command} "
fi
command="${command}${scp_host}:$scp_path"
[ -n "$scp_template" ] && command="${command}/$scp_template"

log "$command"
eval "$command" >> "$LOG_FILE" 2>&1

if [ -n "$scp_command" ]; then
	command="ssh"
	command="$command -p $scp_port"
        if [ -n "$scp_user" ]; then
		 command="${command} ${scp_user}@"
	else
		command="${command} "
	fi
	command="${command}${scp_host}"
	command="${command} ${scp_command}"
	log "$command"
	eval "$command" >> "$LOG_FILE" 2>&1
fi

[ "true" = "$verbose" ] && cat "$LOG_FILE"

quit_clean 0
