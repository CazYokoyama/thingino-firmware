#!/bin/sh

plugin="scp"

. /sbin/common-plugins

show_help() {
	echo "Usage: $0 [-s host] [-p port] [-u username] [-P password] [-d path] [-f file] [-v] [-h]
  -s host     SCP server FQDN or IP address.
  -p port     SCP server port.
  -d path     Directory on server, relative to SCP root.
  -f file     File to upload.
  -u username SCP username.
  -P password SCP password.
  -v          Verbose output.
  -h          Show this help.
"
	quit_clean 0
}

# override config values with command line arguments
while getopts d:f:p:P:s:u:vh flag; do
	case "$flag" in
		d)
			scp_path=$OPTARG
			;;
		f)
			scp_file=$OPTARG
			;;
		p)
			scp_port=$OPTARG
			;;
		P)
			scp_password=$OPTARG
			;;
		s)
			scp_host=$OPTARG
			;;
		u)
			scp_user=$OPTARG
			;;
		v)
			verbose="true"
			;;
		h | *)
			show_help
			;;
	esac
done

[ -z "$scp_port" ] && scp_port=21

if [ "false" = "$scp_enabled" ]; then
	log "Sending to SCP is disabled."
	quit_clean 10
fi

# validate mandatory values
if [ -z "$scp_host" ]; then
	log "SCP host not found"
	quit_clean 11
fi

if [ -z "$scp_port" ]; then
	log "SCP port not found"
	quit_clean 12
fi

if [ -z "$scp_file" ]; then
	snapshot=/tmp/snapshot.jpg
	[ ! -f "$snapshot" ] && log "Cannot find a snapshot" && quit_clean 3

	attachment=$(mktemp -u /tmp/snapshot-XXXXXX).jpg
	delete_tempfile="true"
	cp $snapshot $attachment

	scp_file=$attachment
fi

command="curl --verbose"
command="$command --connect-timeout $curl_timeout"
command="$command --max-time $curl_timeout"

# SOCK5 proxy, if needed
if [ "true" = "$scp_socks5_enabled" ]; then
	. /etc/webui/socks5.conf
	command="$command --socks5-hostname ${socks5_host}:$socks5_port"
	command="$command --proxy-user ${socks5_login}:$socks5_password"
fi

command="$command --url scp://"
[ -n "$scp_user" ] && [ -n "$scp_password" ] && command="${command}${scp_user}:$scp_password"
command="${command}@${scp_host}:$scp_port"
[ -n "$scp_path" ] && command="${command}/${scp_path// /%20}"
command="${command}/$(date +"$scp_template")"
command="$command --upload-file $scp_file"
command="$command --scp-create-dirs"

log "$command"
eval "$command" >> "$LOG_FILE" 2>&1

[ "true" = "$delete_tempfile" ] && [ -f "$attachment" ] && rm "$attachment"
[ "true" = "$verbose" ] && cat "$LOG_FILE"

quit_clean 0
