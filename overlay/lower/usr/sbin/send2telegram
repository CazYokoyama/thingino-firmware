#!/bin/sh

plugin="telegram"

. /sbin/common

show_help() {
	echo "Usage: $0 [arguments] [clip|motion|snap]
  -t token    Telegram bot token. See https://t.me/botfather if you need one.
  -c channel  Telegram channel ID. See https://gist.github.com/mraaroncruz/e76d19f7d61d59419002db54030ebe35
  -m message  Send message.
  -f file     Send file.
  -s          Disable notification.
  -v          Verbose output.
  -h          Show this help.
"
	quit_clean 0
}

verbosity="--silent"
# override config values with command line arguments
while getopts c:f:m:st:vh flag; do
	case "$flag" in
		c) telegram_channel=$OPTARG ;;
		m) telegram_message=$OPTARG ;;
		f) telegram_file=$OPTARG ;;
		s) telegram_silent="true" ;;
		t) telegram_token=$OPTARG ;;
		v) verbosity="--verbose" ;;
		h) show_help ;;
	esac
done

shift $((OPTIND - 1))

if [ $# -ne 0 ]; then
	case "$1" in
		clip)
			telegram_attach_photo="false"
			telegram_attach_video="true"
			;;
		motion)
			telegram_attach_photo="true"
			telegram_attach_video="true"
			;;
		snap)
			telegram_attach_photo="true"
			telegram_attach_video="false"
			;;
	esac
fi

parse_caption() {
	echo "$telegram_caption" | sed "s/%hostname/$(hostname -s)/;s/%datetime/$(date @$(stat -c%Z $1))/"
}

copy_photo() {
	[ -f "$SNAPSHOT_FILE" ] || die "Snapshot not found"
	photo2=$(mktemp -u)
	cp "$SNAPSHOT_FILE" "$photo2"
}

copy_video() {
	[ -f "$VBUFFER_FILE" ] || die "Video buffer not found"
	video2=$(mktemp -u)
	cp "$VBUFFER_FILE" "$video2"
}

remove_tempfiles() {
	[ -f "$photo2" ] && rm "$photo2"
	[ -f "$video2" ] && rm "$video2"
}

# validate mandatory values
[ -z "$telegram_token" ] && die "Telegram token not found"
[ -z "$telegram_channel" ] && die "Telegram channel not found"

command="$CURL $verbosity -H 'Content-Type: multipart/form-data' -F 'chat_id=$telegram_channel'"
[ "true" = "$telegram_silent" ] && build_cmd "-F 'disable_notification=true'"
build_cmd "--url https://api.telegram.org/bot$telegram_token/"
# no further modifications to command after this point
if [ "true" = "$telegram_attach_video" ] && [ "true" = "$telegram_attach_photo" ]; then
	# https://core.telegram.org/bots/api#sendmediagroup
	copy_photo
	copy_video
	caption=$(parse_caption $photo2)
	[ -n "$telegram_message" ] && caption="$caption - $telegram_message"
	media='[{"type":"photo","media":"attach://snap","caption":"'$caption'"},{"type":"video","media":"attach://video"}]'
	command="${command}sendMediaGroup -F 'snap=@$photo2' -F 'video=@$video2' -F 'media=$media'"
elif [ "true" = "$telegram_attach_video" ]; then
	# https://core.telegram.org/bots/api#sendvideo
	copy_video
	caption=$(parse_caption $video2)
	[ -n "$telegram_message" ] && caption="$caption - $telegram_message"
	command="${command}sendVideo -F 'video=@$video2' -F 'caption=$caption'"
elif [ "true" = "$telegram_attach_photo" ]; then
	# https://core.telegram.org/bots/api#sendphoto
	copy_photo
	caption=$(parse_caption $photo2)
	[ -n "$telegram_message" ] && caption="$caption - $telegram_message"
	command="${command}sendPhoto -F 'photo=@$photo2' -F 'caption=$caption'"
elif [ -n "$telegram_message" ]; then
	# https://core.telegram.org/bots/api#sendmessage
	command="${command}sendMessage -F 'text=$telegram_message'"
elif [ -n "$telegram_file" ] && [ -f "$telegram_file" ]; then
	# https://core.telegram.org/bots/api#senddocument
	caption=$(parse_caption $telegram_file)
	[ -n "$telegram_message" ] && caption="$caption - $telegram_message"
	command="${command}sendDocument -F 'document=@$1' -F 'caption=$caption'"
else
	die "Nothing to send"
fi

run "$command"

remove_tempfiles

quit_clean 0
