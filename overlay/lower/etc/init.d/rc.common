#!/bin/sh

if [ "$0" = "-sh" ]; then
	echo "Do not run directly!"
	return
fi

ENV_DUMP_FILE="/tmp/environment"
if [ -f "$ENV_DUMP_FILE" ]; then
        echo "Evaluating $ENV_DUMP_FILE"
        . "$ENV_DUMP_FILE"
fi

CONFIG_FILE="/etc/web.conf"
if [ -f "$CONFIG_FILE" ]; then
        echo "Evaluating $CONFIG_FILE"
        . "$CONFIG_FILE"
fi

. /usr/share/common

PID=$$
LOCK_FILE="/run/process-$PID.pid"
LOG_FILE=/tmp/webui.log
LOG_SIZE_LIMIT=50000

CURL="curl --show-error --fail --connect-timeout 10 --max-time 30 --retry 3"

CRONTABS="/etc/cron/crontabs/root"

DAEMON=${DAEMON:-$0}
DAEMON_ARGS=${DAEMON_ARGS:-}
DAEMON_PATH="/bin"
DAEMON_SHORT=$(basename "${DAEMON%% *}" | sed -r 's/^[FKS]\d{2}//')
DAEMON_FULL="$(which $DAEMON_SHORT)"
PIDFILE="/run/$DAEMON_SHORT.pid"

DAEMON_CONFIG="/etc/default/$DAEMON_SHORT"
[ -r "$DAEMON_CONFIG" ] && . "$DAEMON_CONFIG"

decrement_mac() {
	local mac last_byte_dec

	mac=$ethaddr
	[ -z "$mac" ] && die "Error: MAC address not found in $CONFIG_FILE"

	last_byte_dec=$((0x${mac##*:} - 1))
	[ $last_byte_dec -lt 0 ] && die "Error: MAC address cannot be decremented below 00"
	ethaddr=$(printf "%s:%02x" "${mac%:*}" "$last_byte_dec")
}

die() {
	if [ -n "$1" ]; then
		echo "$1"
		echo_c 124 "$1"
	fi
	exit 1
}

ensure_dir() {
	[ -d "$1" ] || mkdir -p "$1"
}

ensure_file() {
	ensure_dir "$(dirname $1)"
	[ -f "$1" ] || touch "$1"
}

gpio_control() {
	gpio_name="$1"
	gpio_power="$(grep ^${gpio_name}= $CONFIG_FILE | cut -d= -f2)"

	if [ -z "$gpio_power" ]; then
		return 1  # no value
	fi

	num=${gpio_power%[oO]}
	state=${gpio_power#$num}

	case "$state" in
		O)	gpio_cmd="high" ;;
		o)	gpio_cmd="low" ;;
		*)	echo "Invalid state for GPIO $gpio_name: $state"
			return 2  # invalid state
			;;
	esac

	echo "Set GPIO $num $gpio_cmd"
	gpio $gpio_cmd $num 2>&1 && return 0  # success

	echo "Failed to set GPIO $num $gpio_cmd"
	return 3  # failure
}

iface_default() {
	local iface

	[ -z "$iface" ] && iface=$(ip -4 r | awk '/default/{print $5; exit}')
	[ -z "$iface" ] && iface=$(ip -4 r | awk '{print $3; exit}')
	[ -z "$iface" ] && iface=$(ip -6 r | awk '/default/{print $5; exit}')
	[ -z "$iface" ] && iface=$(ip -6 r | awk '{print $3; exit}')
	echo "$iface"
}

iface_exists() {
	iface="$1"

	if [ -z "$iface" ]; then
		echo "Interface parameter missing." 2>&1
		return 1
	fi

	if ip link show $iface &> /dev/null; then
		if [ "eth0" = $iface ] && ! is_gateway_reachable; then
			echo "eth0 has no local connection" 2>&1
			return 1
		fi

		# echo "Interface '$iface' exists." 2>&1
		return 0
	else
		echo "Interface '$iface' does not exist." 2>&1
		return 1
	fi
}

indent_output() {
	awk '{print " "$0}'
}

is_boot_complete() {
	[ "true" = "$boot_complete" ]
}

is_debug_mode() {
	[ $((0 + debug)) -gt 0 ] || [ "true" = "$debug" ]
}

is_streamer_disabled() {
	[ "true" = "$disable_streamer" ] || [ -f /run/portal_mode ]
}

is_streamer_running() {
	pidof prudynt > /dev/null
}

is_gateway_reachable() {
	[ -z "$iface" ] && return 1
	ping -c 1 -W 1 -I $iface $(ip -4 route | grep $iface | grep default | awk '{print $3}') > /dev/null 2>&1 || \
	ping -6 -c 1 -W 1 -I $iface $(ip -6 route | grep $iface | grep default | awk '{print $3}') > /dev/null 2>&1
}

is_usb_console() {
	[ "true" = "$usb_console" ]
}

log() {
	logger -p daemon.info -t ${DAEMON_SHORT}[$$] <&0
}

play_sound() {
	iac -f /usr/share/sounds/$1
}

print_release() {
	[ -f /etc/os-release ] || return
	. /etc/os-release
	echo_c 208 "Thingino $IMAGE_ID [$BUILD_ID]\n"
	echo "Thingino $IMAGE_ID [$BUILD_ID]"
}

quit() {
	if [ -n "$1" ]; then
		echo "$1"
		echo_c 66 "$1"
	fi
	exit 0
}

run() {
	echo "$*"
	is_debug_mode && echo_c 144 "$*"
	eval "$*"
}

set_gpio() {
	echo "Set GPIO $1 to F$2 D$3"
	gpio-diag $1 func $2 drive $3
}

start_daemon() {
	local command

	command="${COMMAND:-$DAEMON_FULL} -- $DAEMON_ARGS"
	if [ -n "$PIDFILE" ] && [ -f "$PIDFILE" ]; then
		start-stop-daemon -b -S -m -p $PIDFILE -x $command 2>&1
	else
		start-stop-daemon -b -S -x $command 2>&1
	fi
}

starting() {
	echo "Starting ${1:-$DAEMON_SHORT}..."
}

stop_daemon() {
	if [ -f "$PIDFILE" ]; then
		start-stop-daemon -K -p $PIDFILE
		rm "$PIDFILE"
	fi

	sleep 0.5

	if pidof $DAEMON > /dev/null; then
		start-stop-daemon -K -n $DAEMON
	fi

	sleep 0.5

	if pidof $DAEMON > /dev/null; then
		start-stop-daemon -K -s SIGKILL -n $DAEMON
	fi
}

stop_daemon_process() {
	start-stop-daemon -K -x $DAEMON_FULL 2>&1
}

stopping() {
	echo "Stopping ${1:-$DAEMON_SHORT}..."
}

tag() {
	echo "$(ts) [$PID:$plugin]"
}

ts() {
	date +"%F %T"
}

# "template"
parse_target() {
	echo "$1" | sed "s/%hostname/$(hostname -s)/g"
}
